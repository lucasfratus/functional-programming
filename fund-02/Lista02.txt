# Nome: Lucas de Oliveira Fratus RA:134698 - Lista 02 - 17/10
1) O que é um literal?

Literal é um valor que não pode ser mudado. Exemplos de literais:
- Números exatos: Inteiros, racionais, complexos com as partes real e imaginária exatas;
- Números inexatos: Ponto flutuante, complexos com parte real ou imaginária inexata;
- Booleano;
- Strings;
- E outros tipos.

2) O que é uma função primitiva?

É uma sequência de instruções de máquina associada com a função. Exemplos:
- Aritméticas;
- Relacionais;
- Strings.

3) O que é uma expressão?
Uma expressão é uma entidade sintática que quando avaliada produz um valor.

4) O que significa avaliar uma expressão?
A avaliação de uma expressão consiste em atribuir valores às variáveis e executar os cálculos na ordem correta. Conforme os valores são determinados, o processo continua até se chegar ao resultado final esperado.

5) O que é uma combinação?
Uma combinação é uma lista não vazia de expressões entre parênteses.

6) Como é chamado a expressão mais a esquerda de uma combinação? E as demais expressões?
A primeira expressão(a mais da esquerda) de uma combinação é chamada de operador. As demais são conhecidas como operandos.

7) Qual é a regra de avaliação para uma combinação?
Cada expressão é avaliada individualmente. Se o operador for uma função básica, essa função será aplicada diretamente aos seus argumentos. 
Caso contrário, se o operador for uma função composta, o conteúdo dessa função será avaliado, substituindo cada parâmetro pelos valores correspondentes dos argumentos dados.

8) Qual é o propósito de uma definição?
Definições servem para dar nome a objetos computacionais, sejam dados ou funções. É a forma de abstração mais elementar.

9) O que é uma função?
Uma função é um conjunto de expressões que mapeia valores de entrada para valores de saída.

10) O que é uma forma especial?
São formas que possuem uma regra de avaliação específica.

11) Por que o and e o or são formas especiais e o not não é?
O not é uma função, alterando o parâmetro passado.

12) A ordem que as expressões de uma combinação são avaliadas pode alterar o valor da combinação? Explique.
Em linguagens que possuem efeitos colaterais sim, a ordem que as expressões de uma combinação são avaliadas pode alterar o valor da combinação.
Em linguagens puramente funcionais, como o Haskell, isso é evitado pela ausência de efeitos colaterais.

13) Quando devemos utilizar o operador =?
Se quisermos comparar se um valor é igual a outro.

14) Qual a diferença entre as funções eq? e equal??
eq? verifica se os operandos referenciam o mesmo objeto na memória.
Já equal? verifica se os operandos são iguais.

15) O que é uma definição com autorreferência?
É uma definição que refere a si mesma. O uso de autorreferência permite que expressões de tamanhos arbitrários sejam criadas.

16) O que é um processo recursivo?
Quando um processo é definido em termos de si mesmo, dizemos que ele é recursivo. O uso de recursividade permite que expressões 
de tamanho arbitrário sejam avaliadas. 

17) Escreva a expressão (3 + 1) × 8/(4 − 1) em Racket. 
(/ (* (+ 3 1) 8) (- 4 1))

18)  Qual o resultado da avaliação da expressão (* 3 (+ 1 2) (/ 10 2) 2)? Mostre o passo a passo da avaliação. 
(* 3 (+ 1 2) (/ 10 2) 2)
(* 3 3 (/ 10 2) 2)
(* 3 3 5 2)
(* 9 5 2)
(* 45 2)
90

19) Qual o resultado da avaliação de (3 + 8) na janela de interações do Racket? E de 3 + 8. Explique. 
As duas formas resultam em erro, já que nenhuma delas enstão de acordo com a sintaxe da linguagem Racket.
A forma correta seria (+ 3 8).

20) Faça uma função chamada area-retangulo que recebe dois argumentos, a largura e a altura de um retângulo, e calcula a sua área. Confira na janela de interações se a função funciona de acordo com os exemplos a seguir 
> (area-retangulo 3 5) 
15 
> (area-retangulo 2.0 2.5) 
5.0
Resolução:
#lang racket
(define (area-retangulo base altura)
    (* base altura))
 
21) Faça uma função chamada produto-anterior-posterior que recebe um número inteiro n e calcula o produto de n, n + 1 e n - 1. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (produto-anterior-posterior 3) 
24 
> (produto-anterior-posterior 1) 
0 
> (produto-anterior-posterior -2) 
-6 

Resolução:
#lang racket
(define (produto-anterior-posterior n)
    (* (n-1) n (n+1)))

;; Metodo de substituição
;; > (produto-anterior-posterior 3)
;; (* (3-1) 3 (3+1))
;; (* 2 3 (3+1))
;; (* 2 3 4)
;; (* 6 4)
;; 24

22) Faça uma função chamada so-primeira-maiuscula que recebe uma palavra não vazia (string) como parâmetro e crie uma nova string convertendo a primeira letra da palavra para maiúscula e o restante da palavra para minúscula. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (so-primeira-maiuscula "paula") 
"Paula" 
> (so-primeira-maiuscula "ALFREDO") 
"Alfredo" 

Resolução:
#lang racket
(define (so-primeira-maiuscula str)
    (string-append (string-upcase(substring str 0 1))
        (string-downcase(substring str 1 (string-length str)))))

;; Metodo de substituição
;; > (so-primeira-maiuscula "paula")
;;   (string-append (string-upcase(substring "paula" 0 1))
;;        (string-downcase(substring "paula" 1 (string-length paula))))
;; (substring "paula" 0 1) ;; "p"
;; (string-upcase "p" ) ;; "P"
;; (substring "paula" 1 5) ;; "aula"
;; (string-downcase "aula") ;; "aula"
;; (string-append "P" "aula") ;; "Paula"
;; "Paula"


23) Faça uma função chamada exclamacao que recebe dois argumento, uma string frase e um número natural n, e produz a mesma frase adicionando n pontos de exclamação no final da frase. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (exclamacao "Nossa" 3) 
"Nossa!!!" 
> (exclamacao "Que legal" 1) 
"Que legal!" 
> (exclamacao "Nada" 0) 
"Nada" 

Resolução:
#lang racket
(define (exclamacao frase numero_exclamacoes)
    (string-append frase (make-string numero_exclamacoes #\!)))

;; Exemplo de uso do Método de Substituição
;; > (exclamacao "Nossa" 3)
;; (string-append "Nossa" (make-string 3 #\!))
;; (make-string 3 #\!) ;; "!!!"
;; (string-append "Nossa" "!!!") ;; "Nossa!!!"
;; "Nossa!!!"

24) Faça uma função chamada par? que recebe um número natural n e indica se n é par. Um número é par se o resto da divisão dele por 2 é igual a zero. Não use if nem cond e nem a função pré-definida even?. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (par? 3) 
#f 
> (par? 6) 
#t 

Resolução:
#lang racket
(define (par?  numero)
  (= 0 (remainder numero 2)))

;; > (par? 3)
;; (= 0 (remainder 3 2))
;; (remainder 3 2) ;; 1
;; ( = 0 1)
;; #f

25) Faça uma função chamada tres-digitos? que recebe um número natural n e verifica se n tem exatamente 3 dígitos. Não use if nem cond. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (tres-digitos? 99) 
#f 
> (tres-digitos? 100) 
#t 
> (tres-digitos? 999) 
#t 
> (tres-digitos? 1000) 
#f 

Resolução:
#lang racket
(define (tres-digitos? numero)
    (equal? (string-length (number->string numero)) 3))

;; > (tres-digitos? 99)
;;(equal? (string-length (number->string 99)) 3)
;;(number->string 99) ;; 99 -> "99"
;;(equal? (string-length "99") 3)
;;(string-length "99") ;; 2
;;(equal? 2 3)
;; #f

26) Faça uma função maximo que encontre o máximo entre dois números dados. Não use a função pré definida max. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Use o método de substituição para verificar se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (maximo 3 5) 
5 
> (maximo 8 4) 
8 
> (maximo 6 6) 
6 

Resolução:
#lang racket
(define (maximo x1 x2)
  (if (>= x1 x2)
      x1
      x2))

;; Método da substituição
;; > (maximo 3 5)
;;(if (>= 3 5)
;;     3
;;     5)
;;(>= 3 5)
;;5

27) Faça uma função chamada ordem que recebe três números distintos, a, b e c e determina se a sequencia a, b, c está em ordem crescente, 
decrescente ou não está em ordem. Use os operadores relacionas com três argumentos.Use o método de substituição para verificar 
se a sua função funciona corretamente de acordo com os exemplos a seguir. Em seguida confira a respostas na janela de iterações do DrRacket. 
> (ordem 3 8 12) 
"crescente" 
> (ordem 3 1 4) 
"sem ordem" 
> (ordem 3 1 0) 
"decrescente" 

Resolução:
#lang racket
(define (ordem a b c)
    (cond
          [(and (= c b) (= b a)) "Iguais"]
          [(and (>= c b) (>= b a)) "Crescente"]
          [(and (<= c b) (<= b a)) "Descrescente"]
          [else "Sem ordem"]))

;; Metodo de substituição
;; > (ordem 3 8 12)
;;   (cond
;;          [(and (= 12 8) (= 8 3)) "Iguais"]
;;          [(and (>= 12 8) (>= 8 3)) "Crescente"]
;;          [(and (<= 12 8) (<= 8 3)) "Descrescente"]
;;          [else "Sem ordem"]))

;; (and (= 12 8) (= 8 3)) ;; #f
;; (and (>= 12 8) (>= 8 3)) ;; # t

;; Crescente

28) [sicp 1.4] O modelo de avaliação visto em sala permite combinações em que os operadores são expressões compostas. Use esta observação para descrever o comportamento do seguinte procedimento: 
(define (a-plus-abs-b a b) 
((if (> b 0) + -) a b))
 
Resolução:
Caso b seja um número maior que zero, o predicado "+" sera True(#t) e a expressão será (+ a b). Se não (caso b seja menor ou igual a zero),
a expressão será (- a b).

29) [sicp 1.5] Ben Bitdiddle inventou um método para determinar se um interpretador está usando avaliação com ordem aplicativa ou avaliação com ordem normal. Ele definiu os seguintes procedimentos: 
(define (p) (p)) 
(define (test x y) 
(if (= x 0) 
0 
y)) 
Então avaliou a seguinte expressão 
(test 0 (p)) 
Qual é o comportamento que Ben irá observar com um interpretador que usa avaliação com ordem aplicativa? Qual é o comportamento que ele irá observar com um interpretador que usa avaliação com ordem normal? Explique a sua resposta. 

Resolução:
Ordem Aplicativa
Em ordem aplicativa, o interpretador avalia os argumentos e, em seguida, realiza as aplicações.
- Primeiramente, test será avaliado, retornando o procedimento associado a ele. 
- Após isso, ele avalia o primeiro operando, que é o 0, e retorna 0.
- Em seguida, ele avalia o segundo operando, que é o p. Porém, a avaliação de p leva de volta a definição de p((define (p) (p))). Dessa forma, (p) se 
autorreferencia, entrando em um loop infinito, já que ele continua tentando avaliar o p.

Ordem Normal
Em ordem normal, o interpretador não avalia p até que exista a necessidade.
- Primeiramente ele avalia o test.
- Após isso, ele aplica o procedimento test com 0 como primeiro operando e (p) como segundo. Portanto, ele não avalia imediatamente o (p)
- Se o test não requer a avaliação do segundo argumento (p) para produzir um resultado, o interpretador pode retornar um valor sem avaliar (p).